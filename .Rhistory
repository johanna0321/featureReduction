values = c("#CD534CFF", "#0073C2FF","white", "white","grey70")) +
labs(title = "Citrate Synthase Activity") +
#scale_x_discrete(breaks = c("HCR.Female","HCR.Male","LCR.Female","LCR.Male","SDR.Male"),
#               labels = c("HCR-F","HCR-M","LCR-F","LCR-M","SD-M")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
facet_wrap(~Type, scales = "free", labeller = labeller(Type = type.labs))
print(cs_plot)
#ggsave(plot = cs_plot, height = 2.69, width = 7, unit = "in",
#         filename = paste0(local_path,"/",gsub("-","",Sys.Date()),"-Citrate-Synthase-Activity.pdf"), device = "pdf")
anova_cs <- new_cs_data %>%
group_by(Tissue, Type) %>%
dplyr::group_modify(~ broom::tidy(aov(mg ~ Line*Sex, .))) %>%
filter(adj.p.value <= 0.05)
anova_cs <- new_cs_data %>%
group_by(Tissue, Type) %>%
dplyr::group_modify(~ broom::tidy(aov(mg ~ Line*Sex, .))) %>%
filter(p.value <= 0.05)
kable(select(anova_cs, c(Type,Tissue,term,contrast,adj.p.value)), caption = paste0("Significant Effects, CS Activity"))
kable(select(anova_cs, c(Type,Tissue,term,p.value)), caption = paste0("Significant Effects, CS Activity"))
kable(anova_cs, caption = paste0("Significant Effects, CS Activity"))
View(anova_cs)
anova_bw <- weight_data %>%
filter(Tissue == "Heart") %>% #duplicate data so just pick one tissue
group_by(Type) %>%
dplyr::group_modify(~ broom::tidy(aov(grams ~ Line*Sex, .))) %>%
filter(p.value <= 0.05)
kable(anova_bw, caption = paste0("Significant Effects, Weight"))
anova_cs <- new_cs_data %>%
group_by(Tissue, Type) %>%
dplyr::group_modify(~ broom::tidy(aov(mg ~ Line*Sex, .)))
kable(anova_cs, caption = paste0("Significant Effects, CS Activity"))
anova_cs <- new_cs_data %>%
group_by(Tissue, Type) %>%
dplyr::group_modify(~ broom::tidy(aov(mg ~ Line*Sex, .))) %>%
filter(p.value <= 0.05)
kable(anova_cs, caption = paste0("Significant Effects, CS Activity"))
setwd("/Users/johf/Dropbox (University of Michigan)/from_box/Shared-R-Functions/MetaboReduct")
install("MetaboReduct")
install.packages("MetaboReduct")
setwd("/Users/johf/Dropbox (University of Michigan)/from_box/Shared-R-Functions")
?install.packages("MetaboReduct")
install.packages("MetaboReduct")
devtools::install("MetaboReduct")
library(MetaboReduct)
?reduce_features_by_pca()
getwd()
library(devtools)
devtools::document()
setwd("~/Dropbox (University of Michigan)/from_box/Shared-R-Functions/MetaboReduct")
devtools::document()
setwd("~/Dropbox (University of Michigan)/from_box/Shared-R-Functions")
devtools::install("MetaboReduct")
library(MetaboReduct)
?reduce_features_by_pca
setwd("~/Dropbox (University of Michigan)/from_box/Shared-R-Functions/MetaboReduct")
?na.rm
devtools:document()
library(devtools)
devtools:document()
devtools::document()
?na.omit()
library(MetaboReduct)
?reduce_features_by_pca
load("Lipid-Cluster-Example-Data.RData")
load("/Users/johf/Dropbox (University of Michigan)/from_box/Shared-R-Functions/Lipid-Cluster-Example-Data.RData")
View(example_cluster_information)
View(example_lipid_data)
rat_lipidomics_day0 <- example_lipid_data[grepl("//.0"),]
rat_lipidomics_day0 <- example_lipid_data[grepl("//.0"),rownames(example_lipid_data)]
rat_lipidomics_day0 <- example_lipid_data[grepl("//.0",rownames(example_lipid_data)),]
View(example_lipid_data)
rat_lipidomics_day0 <- example_lipid_data[grepl("//*.0",rownames(example_lipid_data)),]
rat_lipidomics_day0 <- example_lipid_data[grepl("*.0",rownames(example_lipid_data)),]
View(rat_lipidomics_day0)
rat_lipidomics_day0 <- example_lipid_data[grepl("*//.0",rownames(example_lipid_data)),]
rat_lipidomics_day0 <- example_lipid_data[grepl("*/.0",rownames(example_lipid_data)),]
rat_lipidomics_day0 <- example_lipid_data[grepl("..0",rownames(example_lipid_data)),]
rat_lipidomics_day0 <- example_lipid_data[grepl("\\.0",rownames(example_lipid_data)),]
rat_lipidomics_day3 <- example_lipid_data[grepl("\\.3",rownames(example_lipid_data)),]
rat_lipidomics_day14 <- example_lipid_data[grepl("\\.14",rownames(example_lipid_data)),]
View(example_cluster_information)
rat_lipidomics_group_key <- example_cluster_information
reduce_features_by_pca <- function(feature_data = NULL, feature_group_key = NULL,
norm = "none"){
if(nrow(feature_data)<5){
warning("This grouping function uses PCA weighing and is not recommended for datasets with less than 5 observations")
}
# Assign colnames to feature_group_key and confirm as factor
if(ncol(feature_group_key)<2){
stop("feature_group_key requires 2 columns: column 1 is feature and column 2 is the group ID")
}
feature_group_key <- as.data.frame(apply(as.data.frame(feature_group_key), 2, as.character))
colnames(feature_group_key)[1:2] <- c("Feature","Group")
rownames(feature_group_key) <- feature_group_key[,"Feature"]
# Confirm that feature_data is numeric and and that colnames (features) exist
# in feature_group_key
feature_data_temp <- apply(as.data.frame(feature_data), 2, as.numeric)
rownames(feature_data_temp) <- rownames(feature_data)
colnames(feature_data_temp) <- colnames(feature_data)
if(!any(colnames(feature_data_temp) %in% feature_group_key[,"Feature"])){
stop("No features (column names) in feature_data found in feature_group_key")
}
if(!all(colnames(feature_data_temp) %in% feature_group_key[,"Feature"])){
warning(paste0("Not all features in feature_data found in feature_group_key. These features will not be included in grouping analyses: ",
paste0(colnames(feature_data_temp)[!colnames(feature_data_temp) %in%
feature_group_key[,"Feature"]],collapse=", ")))
}
# Initialize dataframe to store group values
return_df <- data.frame(matrix(ncol = length(unique(feature_group_key[,"Group"])),
nrow = nrow(feature_data)))
colnames(return_df) <- unique(feature_group_key[,"Group"])
rownames(return_df) <- rownames(feature_data)
# The following loops over each unique group to assign a single value for each observation
for (g in unique(feature_group_key[,"Group"])) {
# Get the feature names that correspond to interative loop
filtered_group_features <- feature_group_key %>%
dplyr::filter(Group == g) %>%
dplyr::pull(Feature)
# Select features from feature_data
if(any(filtered_group_features %in% colnames(feature_data))){
filtered_feature_data <- feature_data %>%
dplyr::select(any(filtered_group_features))
} else {
message(paste0("Skipping group ", g, "; no group features found in feature_data"))
next
}
print(paste0("For group ", g, ", ", ncol(filtered_feature_data)," features found in feature_data; performing PCA analysis"))
# Get PC1 rotation from PCA  data
# Absolute value of the rotation data is extracted because we are using amplification of effect and not direction of effect
pca <- prcomp(na.exclude(filtered_feature_data), scale = T)
pc1_rotation <- abs(pca$rotation[,1])
# Individual feature values are multiplied by the absolute values of their PC1
# rotation/loading factor so that the values are adjusted for their degree
# of contribution to variation in the data, then summed
if(norm == "none") {
pc1_adjusted_values <- t(filtered_feature_data)*pc1_rotation
} else if(norm == "scale") {
filtered_feature_data_scale <- apply(filtered_feature_data, 2, function(x) scale(x))
pc1_adjusted_values <- t(filtered_feature_data_scale)*pc1_rotation
} else {
error("Provide one of 'none' or 'scale' for norm option")
}
feature_group_data <- as.data.frame(apply(pc1_adjusted_values, 2, function(x) sum(x)))
return_df[,g] <- feature_group_data
}
return(return_df)
}
rat_lipidomics_day0[50,50]=NA
sum(is.na(rat_lipidomics_day0))
reduce_features_by_pca(rat_lipidomics_day0,rat_lipidomics_group_key,"none")
library(dplyr)
reduce_features_by_pca(rat_lipidomics_day0,rat_lipidomics_group_key,"none")
View(reduce_features_by_pca)
reduce_features_by_pca <- function(feature_data = NULL, feature_group_key = NULL,
norm = "none"){
if(nrow(feature_data)<5){
warning("This grouping function uses PCA weighing and is not recommended for datasets with less than 5 observations")
}
# Assign colnames to feature_group_key and confirm as factor
if(ncol(feature_group_key)<2){
stop("feature_group_key requires 2 columns: column 1 is feature and column 2 is the group ID")
}
feature_group_key <- as.data.frame(apply(as.data.frame(feature_group_key), 2, as.character))
colnames(feature_group_key)[1:2] <- c("Feature","Group")
rownames(feature_group_key) <- feature_group_key[,"Feature"]
# Confirm that feature_data is numeric and and that colnames (features) exist
# in feature_group_key
feature_data_temp <- apply(as.data.frame(feature_data), 2, as.numeric)
rownames(feature_data_temp) <- rownames(feature_data)
colnames(feature_data_temp) <- colnames(feature_data)
if(!any(colnames(feature_data_temp) %in% feature_group_key[,"Feature"])){
stop("No features (column names) in feature_data found in feature_group_key")
}
if(!all(colnames(feature_data_temp) %in% feature_group_key[,"Feature"])){
warning(paste0("Not all features in feature_data found in feature_group_key. These features will not be included in grouping analyses: ",
paste0(colnames(feature_data_temp)[!colnames(feature_data_temp) %in%
feature_group_key[,"Feature"]],collapse=", ")))
}
# Initialize dataframe to store group values
return_df <- data.frame(matrix(ncol = length(unique(feature_group_key[,"Group"])),
nrow = nrow(feature_data)))
colnames(return_df) <- unique(feature_group_key[,"Group"])
rownames(return_df) <- rownames(feature_data)
# The following loops over each unique group to assign a single value for each observation
for (g in unique(feature_group_key[,"Group"])) {
# Get the feature names that correspond to interative loop
filtered_group_features <- feature_group_key %>%
dplyr::filter(Group == g) %>%
dplyr::pull(Feature)
# Select features from feature_data
if(any(filtered_group_features %in% colnames(feature_data))){
filtered_feature_data <- feature_data[,(colnames(feature_data) %in% filtered_group_features)]
} else {
message(paste0("Skipping group ", g, "; no group features found in feature_data"))
next
}
print(paste0("For group ", g, ", ", ncol(filtered_feature_data)," features found in feature_data; performing PCA analysis"))
# Get PC1 rotation from PCA  data
# Absolute value of the rotation data is extracted because we are using amplification of effect and not direction of effect
pca <- prcomp(na.exclude(filtered_feature_data), scale = T)
pc1_rotation <- abs(pca$rotation[,1])
# Individual feature values are multiplied by the absolute values of their PC1
# rotation/loading factor so that the values are adjusted for their degree
# of contribution to variation in the data, then summed
if(norm == "none") {
pc1_adjusted_values <- t(filtered_feature_data)*pc1_rotation
} else if(norm == "scale") {
filtered_feature_data_scale <- apply(filtered_feature_data, 2, function(x) scale(x))
pc1_adjusted_values <- t(filtered_feature_data_scale)*pc1_rotation
} else {
error("Provide one of 'none' or 'scale' for norm option")
}
feature_group_data <- as.data.frame(apply(pc1_adjusted_values, 2, function(x) sum(x)))
return_df[,g] <- feature_group_data
}
return(return_df)
}
reduce_features_by_pca(rat_lipidomics_day0,rat_lipidomics_group_key,"none")
test=reduce_features_by_pca(rat_lipidomics_day0,rat_lipidomics_group_key,"none")
View(test)
test=reduce_features_by_pca(log2(rat_lipidomics_day0),rat_lipidomics_group_key,"none")
sum(is.na(rat_lipidomics_day0))
reduce_features_by_pca <- function(feature_data = NULL, feature_group_key = NULL,
norm = "none"){
if(nrow(feature_data)<5){
warning("This grouping function uses PCA weighing and is not recommended for datasets with less than 5 observations")
}
# Assign colnames to feature_group_key and confirm as factor
if(ncol(feature_group_key)<2){
stop("feature_group_key requires 2 columns: column 1 is feature and column 2 is the group ID")
}
feature_group_key <- as.data.frame(apply(as.data.frame(feature_group_key), 2, as.character))
colnames(feature_group_key)[1:2] <- c("Feature","Group")
rownames(feature_group_key) <- feature_group_key[,"Feature"]
# Confirm that feature_data is numeric and and that colnames (features) exist
# in feature_group_key
feature_data_temp <- apply(as.data.frame(feature_data), 2, as.numeric)
rownames(feature_data_temp) <- rownames(feature_data)
colnames(feature_data_temp) <- colnames(feature_data)
if(!any(colnames(feature_data_temp) %in% feature_group_key[,"Feature"])){
stop("No features (column names) in feature_data found in feature_group_key")
}
if(!all(colnames(feature_data_temp) %in% feature_group_key[,"Feature"])){
warning(paste0("Not all features in feature_data found in feature_group_key. These features will not be included in grouping analyses: ",
paste0(colnames(feature_data_temp)[!colnames(feature_data_temp) %in%
feature_group_key[,"Feature"]],collapse=", ")))
}
# Initialize dataframe to store group values
return_df <- data.frame(matrix(ncol = length(unique(feature_group_key[,"Group"])),
nrow = nrow(feature_data)))
colnames(return_df) <- unique(feature_group_key[,"Group"])
rownames(return_df) <- rownames(feature_data)
# The following loops over each unique group to assign a single value for each observation
for (g in unique(feature_group_key[,"Group"])) {
# Get the feature names that correspond to interative loop
filtered_group_features <- feature_group_key %>%
dplyr::filter(Group == g) %>%
dplyr::pull(Feature)
# Select features from feature_data
if(any(filtered_group_features %in% colnames(feature_data))){
filtered_feature_data <- feature_data[,(colnames(feature_data) %in% filtered_group_features)]
} else {
message(paste0("Skipping group ", g, "; no group features found in feature_data"))
next
}
print(paste0("For group ", g, ", ", ncol(filtered_feature_data)," features found in feature_data; performing PCA analysis"))
# Get PC1 rotation from PCA  data
# Absolute value of the rotation data is extracted because we are using amplification of effect and not direction of effect
#if(sum(is.na(filtered_feature_data))>0){
#  print(paste0("")
#}
#pca <- prcomp(na.exclude(filtered_feature_data), scale = T)
pca <- prcomp(filtered_feature_data, scale = T)
pc1_rotation <- abs(pca$rotation[,1])
# Individual feature values are multiplied by the absolute values of their PC1
# rotation/loading factor so that the values are adjusted for their degree
# of contribution to variation in the data, then summed
if(norm == "none") {
pc1_adjusted_values <- t(filtered_feature_data)*pc1_rotation
} else if(norm == "scale") {
filtered_feature_data_scale <- apply(filtered_feature_data, 2, function(x) scale(x))
pc1_adjusted_values <- t(filtered_feature_data_scale)*pc1_rotation
} else {
error("Provide one of 'none' or 'scale' for norm option")
}
feature_group_data <- as.data.frame(apply(pc1_adjusted_values, 2, function(x) sum(x)))
return_df[,g] <- feature_group_data
}
return(return_df)
}
test=reduce_features_by_pca(log2(rat_lipidomics_day0),rat_lipidomics_group_key,"none")
reduce_features_by_pca <- function(feature_data = NULL, feature_group_key = NULL,
norm = "none"){
if(nrow(feature_data)<5){
warning("This grouping function uses PCA weighing and is not recommended for datasets with less than 5 observations")
}
# Assign colnames to feature_group_key and confirm as factor
if(ncol(feature_group_key)<2){
stop("feature_group_key requires 2 columns: column 1 is feature and column 2 is the group ID")
}
feature_group_key <- as.data.frame(apply(as.data.frame(feature_group_key), 2, as.character))
colnames(feature_group_key)[1:2] <- c("Feature","Group")
rownames(feature_group_key) <- feature_group_key[,"Feature"]
# Confirm that feature_data is numeric and and that colnames (features) exist
# in feature_group_key
feature_data_temp <- apply(as.data.frame(feature_data), 2, as.numeric)
rownames(feature_data_temp) <- rownames(feature_data)
colnames(feature_data_temp) <- colnames(feature_data)
if(!any(colnames(feature_data_temp) %in% feature_group_key[,"Feature"])){
stop("No features (column names) in feature_data found in feature_group_key")
}
if(!all(colnames(feature_data_temp) %in% feature_group_key[,"Feature"])){
warning(paste0("Not all features in feature_data found in feature_group_key. These features will not be included in grouping analyses: ",
paste0(colnames(feature_data_temp)[!colnames(feature_data_temp) %in%
feature_group_key[,"Feature"]],collapse=", ")))
}
# Initialize dataframe to store group values
return_df <- data.frame(matrix(ncol = length(unique(feature_group_key[,"Group"])),
nrow = nrow(feature_data)))
colnames(return_df) <- unique(feature_group_key[,"Group"])
rownames(return_df) <- rownames(feature_data)
# The following loops over each unique group to assign a single value for each observation
for (g in unique(feature_group_key[,"Group"])) {
# Get the feature names that correspond to interative loop
filtered_group_features <- feature_group_key %>%
dplyr::filter(Group == g) %>%
dplyr::pull(Feature)
# Select features from feature_data
if(any(filtered_group_features %in% colnames(feature_data))){
filtered_feature_data <- feature_data[,(colnames(feature_data) %in% filtered_group_features)]
} else {
message(paste0("Skipping group ", g, "; no group features found in feature_data"))
next
}
print(paste0("For group ", g, ", ", ncol(filtered_feature_data)," features found in feature_data; performing PCA analysis"))
# Get PC1 rotation from PCA  data
# Absolute value of the rotation data is extracted because we are using amplification of effect and not direction of effect
if(sum(is.na(filtered_feature_data))>0){
print(paste0("For group ", g, ", ", sum(is.na(filtered_feature_data))," NA values; excluding from PCA analysis"))
}
pca <- prcomp(na.exclude(filtered_feature_data), scale = T)
pc1_rotation <- abs(pca$rotation[,1])
# Individual feature values are multiplied by the absolute values of their PC1
# rotation/loading factor so that the values are adjusted for their degree
# of contribution to variation in the data, then summed
if(norm == "none") {
pc1_adjusted_values <- t(filtered_feature_data)*pc1_rotation
} else if(norm == "scale") {
filtered_feature_data_scale <- apply(filtered_feature_data, 2, function(x) scale(x))
pc1_adjusted_values <- t(filtered_feature_data_scale)*pc1_rotation
} else {
error("Provide one of 'none' or 'scale' for norm option")
}
feature_group_data <- as.data.frame(apply(pc1_adjusted_values, 2, function(x) sum(x)))
return_df[,g] <- feature_group_data
}
return(return_df)
}
test=reduce_features_by_pca(log2(rat_lipidomics_day0),rat_lipidomics_group_key,"none")
View(test)
sum(is.na(test))
reduce_features_by_pca <- function(feature_data = NULL, feature_group_key = NULL,
norm = "none"){
if(nrow(feature_data)<5){
warning("This grouping function uses PCA weighing and is not recommended for datasets with less than 5 observations")
}
# Assign colnames to feature_group_key and confirm as factor
if(ncol(feature_group_key)<2){
stop("feature_group_key requires 2 columns: column 1 is feature and column 2 is the group ID")
}
feature_group_key <- as.data.frame(apply(as.data.frame(feature_group_key), 2, as.character))
colnames(feature_group_key)[1:2] <- c("Feature","Group")
rownames(feature_group_key) <- feature_group_key[,"Feature"]
# Confirm that feature_data is numeric and and that colnames (features) exist
# in feature_group_key
feature_data_temp <- apply(as.data.frame(feature_data), 2, as.numeric)
rownames(feature_data_temp) <- rownames(feature_data)
colnames(feature_data_temp) <- colnames(feature_data)
if(!any(colnames(feature_data_temp) %in% feature_group_key[,"Feature"])){
stop("No features (column names) in feature_data found in feature_group_key")
}
if(!all(colnames(feature_data_temp) %in% feature_group_key[,"Feature"])){
warning(paste0("Not all features in feature_data found in feature_group_key. These features will not be included in grouping analyses: ",
paste0(colnames(feature_data_temp)[!colnames(feature_data_temp) %in%
feature_group_key[,"Feature"]],collapse=", ")))
}
# Initialize dataframe to store group values
return_df <- data.frame(matrix(ncol = length(unique(feature_group_key[,"Group"])),
nrow = nrow(feature_data)))
colnames(return_df) <- unique(feature_group_key[,"Group"])
rownames(return_df) <- rownames(feature_data)
# The following loops over each unique group to assign a single value for each observation
for (g in unique(feature_group_key[,"Group"])) {
# Get the feature names that correspond to interative loop
filtered_group_features <- feature_group_key %>%
dplyr::filter(Group == g) %>%
dplyr::pull(Feature)
# Select features from feature_data
if(any(filtered_group_features %in% colnames(feature_data))){
filtered_feature_data <- feature_data[,(colnames(feature_data) %in% filtered_group_features)]
} else {
message(paste0("Skipping group ", g, "; no group features found in feature_data"))
next
}
print(paste0("For group ", g, ", ", ncol(filtered_feature_data)," features found in feature_data; performing PCA analysis"))
# Get PC1 rotation from PCA  data
# Absolute value of the rotation data is extracted because we are using amplification of effect and not direction of effect
if(sum(is.na(filtered_feature_data))>0){
message(paste0("For group ", g, ", ", sum(is.na(filtered_feature_data))," NA values; excluding from PCA analysis"))
}
pca <- prcomp(na.exclude(filtered_feature_data), scale = T)
pc1_rotation <- abs(pca$rotation[,1])
# Individual feature values are multiplied by the absolute values of their PC1
# rotation/loading factor so that the values are adjusted for their degree
# of contribution to variation in the data, then summed
if(norm == "none") {
pc1_adjusted_values <- t(filtered_feature_data)*pc1_rotation
} else if(norm == "scale") {
filtered_feature_data_scale <- apply(filtered_feature_data, 2, function(x) scale(x))
pc1_adjusted_values <- t(filtered_feature_data_scale)*pc1_rotation
} else {
error("Provide one of 'none' or 'scale' for norm option")
}
feature_group_data <- as.data.frame(apply(pc1_adjusted_values, 2, function(x) sum(x)))
return_df[,g] <- feature_group_data
}
return(return_df)
}
test=reduce_features_by_pca(log2(rat_lipidomics_day0),rat_lipidomics_group_key,"none")
library(devtools)
devtools::document()
rm(list=c(reduce_features_by_pca"))
)
rm(list=c(reduce_features_by_pca"))
)
)
rm(list=c("reduce_features_by_pca"))
devtools::document()
devtools::use_data(rat_lipidomics_group_key)
library(devtools)
devtools::use_data(rat_lipidomics_group_key)
usethis::use_data(rat_lipidomics_group_key)
usethis::use_data(rat_lipidomics_day0)
usethis::use_data(rat_lipidomics_day3)
usethis::use_data(rat_lipidomics_day14)
read.csv("/Users/johf/Dropbox (University of Michigan)/from_box/BURANT LAB/Diet Study/Lipidomics Data/R-Working-Directory/baseline.csv", header = T)
meta=read.csv("/Users/johf/Dropbox (University of Michigan)/from_box/BURANT LAB/Diet Study/Lipidomics Data/R-Working-Directory/baseline.csv", header = T)
View(meta)
rat_meta_data <- meta %>% select(Name,Line,Sex,Diet)
View(rat_meta_data)
usethis::use_data(rat_meta_data)
devtools::document()
library(devtools)
library(roxygen2)
library(MetaboReduct)
??MetabpReduct
??MetaboReduct
?reduce_features_by_pca
devtools::install("MetaboReduct")
setwd("~/Dropbox (University of Michigan)/from_box/Shared-R-Functions")
devtools::install("MetaboReduct")
library(MetaboReduct)
?reduce_features_by_pca
devtools::document()
devtools::document()
setwd("~/Dropbox (University of Michigan)/from_box/Shared-R-Functions/MetaboReduct/R")
devtools::document()
load(rat_lipidomics_group_key)
load("rat_lipidomics_group_key")
data("rat_lipidomics_group_key")
View(rat_lipidomics_group_key)
?rat_lipidomics_group_key
setwd("~/Dropbox (University of Michigan)/from_box/Shared-R-Functions")
devtools::install(MetaboReduct)
devtools::install(MetaboReduct)
devtools::install("MetaboReduct")
library(MetaboReduct)
library("devtools")
library("roxygen2")
devtools::document()
setwd("~/Dropbox (University of Michigan)/from_box/Shared-R-Functions/MetaboReduct/data")
roxygen2::document()
namespace:roxygen2
names(roxygen2)
load("~/Dropbox (University of Michigan)/from_box/Shared-R-Functions/MetaboReduct/data/rat_lipidomics_day0.rda")
load("~/Dropbox (University of Michigan)/from_box/Shared-R-Functions/MetaboReduct/data/rat_lipidomics_day14.rda")
View(rat_lipidomics_day14)
load("~/Dropbox (University of Michigan)/from_box/Shared-R-Functions/MetaboReduct/data/rat_meta_data.rda")
View(rat_meta_data)
load("~/Dropbox (University of Michigan)/from_box/Shared-R-Functions/MetaboReduct/data/rat_lipidomics_group_key.rda")
View(rat_lipidomics_group_key)
devtools::install("MetaboReduct")
setwd("~/Dropbox (University of Michigan)/from_box/Shared-R-Functions")
devtools::install("MetaboReduct")
library(MetaboReduct)
rm(list=ls())
library(MetaboReduct)
MetaboReduct::rat_meta_data
?MetaboReduct::rat_meta_data
data(MetaboReduct)
data("MetaboReduct")
??MetaboReduct::rat_meta_data
?reduce_features_by_pca
load(rat_meta_data)
load("rat_meta_data")
data("rat_meta_data")
force(rat_meta_data)
View(rat_meta_data)
View(rat_meta_data)

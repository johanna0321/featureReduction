logFC_se = limma_res_extract_se(limma_res, lmfit.cont.ebayes),
logFC = limma_res$logFC,
tscore = limma_res$t,
p_value = limma_res$P.Value
)
# Add group average intensities
#case_samps = currname$sample_meta %>%
#  filter(sex == s &
#           phase == p &
#            timepoint == substr(curr_tp,1,1) &
#           is_control == "Exercise") %>%
#  rownames()
#curr_res$comparison_average_intensity =
#  apply(data.frame(currdata$data_use[,case_samps]),1,mean,na.rm=TRUE)
#control_samps = currname$sample_meta %>%
#  filter(sex == s & phase == p & is_control == "Control") %>%
#  rownames()
#curr_res$reference_average_intensity = apply(x[,control_samps],1,mean,na.rm=TRUE)
# Add the results
sex_ttest_res = rbind(sex_ttest_res,curr_res)
}
}
}
phase_ttest_res = rbind(phase_ttest_res, sex_ttest_res)
}
return(phase_ttest_res)
})
View(timewise_dea)
View(training_dea)
?reformulate()
?canCorPairs()
# Set the current session
session_packages = c("knitr","kableExtra","limma","tidyverse","metap")
for (lib_name in session_packages){
tryCatch({library(lib_name,character.only = T)}, error = function(e) {
print(paste("Cannot load",lib_name,", please install"))
})
}
# PROVIDE PATH TO THE CONFIG FILE
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This is the only parameter that you need to change here
config <- rjson::fromJSON(file = "/Users/johf/Documents/motrpac_precovid_config.json")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load libraries
#source(file.path(normalizePath(config$motrpac_bic_norm_qc_repo_path),"tools/unsupervised_normalization_functions.R"))
#source(file.path(normalizePath(config$motrpac_bic_norm_qc_repo_path),"tools/gcp_functions.R"))
#source(file.path(normalizePath(config$motrpac_bic_norm_qc_repo_path),"tools/qc_report_aux_functions.R"))
#source(file.path(normalizePath(config$motrpac_bic_norm_qc_repo_path),"tools/config_session.R"))
#source(file.path(normalizePath(config$motrpac_bic_norm_qc_repo_path),"tools/association_analysis_methods.R"))
#source(file.path(normalizePath(config$motrpac_bic_norm_qc_repo_path),"tools/MetabolomicsLibrary.R"))
#source(file.path(normalizePath(config$motrpac_bic_norm_qc_repo_path),"tools/metabolomics_data_parsing_functions.R"))
#source(file.path(normalizePath(config$precovid_repo_path), config$general_shared_functions_library))
#source(file.path(normalizePath(config$precovid_repo_path), config$jf_shared_functions_library))
setwd( file.path(normalizePath(config$precovid_repo_path), "QC") )
tmp <- file.path( file.path(normalizePath(config$precovid_repo_path), "QC", "/tmp") )
if (!dir.exists(tmp)){
dir.create(tmp)
}else{
print("tmp exists")
}
# Load previous metabolomics analysis
load(paste0(tmp,"/metabolomics-all-qc-input-for-da.RData"))
# Load KW test results
load(paste0(tmp,"/supplemental_data.RData"))
knitr::opts_chunk$set(echo = TRUE)
View(metabolomics_processed_datasets)
View(metabolomics_processed_datasets[["t02-plasma,metab-t-conv,"]][["sample_meta"]])
View(metabolomics_processed_datasets)
setwd("~/Documents/GitHub")
library(devtools)
devtools::load_all(featureReduction)
devtools::load_all()
devtools::load_all("featureReduction")
data("rat_lipidomics_day0")
View(rat_lipidomics_day0)
data("rat_lipidomics_day3")
View(rat_lipidomics_day3)
data("rat_lipidomics_group_key")
View(rat_lipidomics_group_key)
test<-reduce_features_by_pca(rat_lipidomics_day0,rat_lipidomics_group_key)
?reduce_features_by_pca()
rm(list=ls())
# Set up the session with necessary packages
session_packages = c("tidyverse")
for (lib_name in session_packages){
tryCatch({library(lib_name,character.only = T)}, error = function(e) {
print(paste("Cannot load",lib_name,", please install"))
})
}
# TEMP UNTIL I CAN DO AN INSTALL PACKAGE
devtools::load_all("/Users/johf/Documents/GitHub/featureReduction")
data("rat_lipidomics_day0")
data("rat_lipidomics_day3")
data("rat_lipidomics_day14")
data("rat_lipidomics_group_key")
data("rat_meta_data")
knitr::opts_chunk$set(echo = TRUE, out.height='50%',out.width='50%')
all_rat_lipids <- list(rat_lipidomics_day0,
rat_lipidomics_day3,
rat_lipidomics_day14)
all_rat_scaled_clusters <- lapply(all_rat_lipids,
function(lipid_dfs) {
reduce_features_by_pca(feature_data = lipid_dfs,
feature_group_key = rat_lipidomics_group_key,
scale = TRUE)})
View(all_rat_scaled_clusters)
all_rat_lipids <- list(day0 = rat_lipidomics_day0,
day3 = rat_lipidomics_day3,
day14 = rat_lipidomics_day14)
all_rat_scaled_clusters <- lapply(all_rat_lipids,
function(lipid_dfs) {
reduce_features_by_pca(feature_data = lipid_dfs,
feature_group_key = rat_lipidomics_group_key,
scale = TRUE)})
View(all_rat_scaled_clusters)
View(rat_meta_data)
View(all_rat_scaled_clusters[["day0"]])
all_rat_scaled_clusters_for_heatmap <- all_rat_scaled_clusters %>%
purrr::map(., function(dayx) {
dayx <- dayx %>%
dplyr::mutate(Name = stringr::substr(rownames(dayx),1,5)) %>%
dplyr::mutate(Day = stringr::substr(rownames(dayx),7,7))
})
?substr
all_rat_scaled_clusters_for_heatmap <- all_rat_scaled_clusters %>%
purrr::map(., function(dayx) {
dayx <- dayx %>%
dplyr::mutate(Name = substr(rownames(dayx),1,5)) %>%
dplyr::mutate(Day = substr(rownames(dayx),7,7))
})
View(all_rat_scaled_clusters_for_heatmap)
View(all_rat_scaled_clusters_for_heatmap[["day0"]])
# Perform data cleaning to make data heatmap plotable
all_rat_scaled_clusters_for_heatmap <- all_rat_scaled_clusters %>%
bind_rows(., .id = "ID")
# Perform data cleaning to make data heatmap plotable
all_rat_scaled_clusters_for_heatmap <- all_rat_scaled_clusters %>%
dplyr::bind_rows(., .id = "Day") %>%
dplyr::mutate(Name = substr(rownames(.),1,5)) %>%
dplyr::relocate(Name) %>%
dplyr::right_join(rat_meta_data, ., by = "Name")
# Perform data cleaning to make data heatmap plotable
all_rat_scaled_clusters_for_heatmap <- all_rat_scaled_clusters %>%
dplyr::bind_rows(., .id = "Day") %>%
dplyr::mutate(Name = substr(rownames(.),1,5)) %>%
dplyr::relocate(Name)
View(all_rat_scaled_clusters)
View(all_rat_scaled_clusters_for_heatmap)
all_rat_lipids <- list(`Day 0` = rat_lipidomics_day0,
`Day 3` = rat_lipidomics_day3,
`Day 14` = rat_lipidomics_day14)
# Perform reduce_features_by_pca on each list item
all_rat_scaled_clusters <- lapply(all_rat_lipids,
function(lipid_dfs) {
featureReduction::reduce_features_by_pca(feature_data = lipid_dfs,
feature_group_key = rat_lipidomics_group_key,
scale = TRUE)})
# Perform data cleaning to make data heatmap plotable
all_rat_scaled_clusters_for_heatmap <- all_rat_scaled_clusters %>%
dplyr::bind_rows(., .id = "Day") %>%
dplyr::mutate(Name = substr(rownames(.),1,5)) %>%
dplyr::relocate(Name)
# Perform data cleaning to make data heatmap plotable
all_rat_scaled_clusters_for_heatmap <- all_rat_scaled_clusters %>%
dplyr::bind_rows(., .id = "Day") %>%
dplyr::mutate(Name = as.integer(substr(rownames(.),1,5))) %>%
dplyr::relocate(Name) %>%
dplyr::right_join(rat_meta_data, ., by = "Name")
View(all_rat_scaled_clusters_for_heatmap)
# Perform data cleaning to make data heatmap plotable
all_rat_scaled_clusters_for_heatmap <- all_rat_scaled_clusters %>%
dplyr::bind_rows(., .id = "Day") %>%
dplyr::mutate(Name = as.integer(substr(rownames(.),1,5))) %>%
dplyr::relocate(Name) %>%
dplyr::right_join(rat_meta_data, ., by = "Name") %>%
tidyr::gather(6:ncol(.), key = "Lipid", value = "Value")
View(all_rat_scaled_clusters_for_heatmap)
# Perform data cleaning to make data heatmap plotable
all_rat_scaled_clusters_for_heatmap <- all_rat_scaled_clusters %>%
dplyr::bind_rows(., .id = "Day") %>%
dplyr::mutate(Name = as.integer(substr(rownames(.),1,5))) %>%
dplyr::relocate(Name) %>%
dplyr::right_join(rat_meta_data, ., by = "Name") %>%
tidyr::gather(key = "Lipid", value = "Value", -c(Name,Line,Diet,Sex,Day))
View(all_rat_scaled_clusters_for_heatmap)
scaled_clusts_for_heatmap <- all_rat_scaled_clusters %>%
dplyr::bind_rows(., .id = "Day") %>%
dplyr::mutate(Name = as.integer(substr(rownames(.),1,5))) %>%
dplyr::relocate(Name) %>%
dplyr::right_join(rat_meta_data, ., by = "Name") %>%
tidyr::gather(key = "Lipid", value = "Value", -c(Name, Line, Diet, Sex, Day))
# Heatmap
ggplot(scaled_clusts_for_heatmap) +
geom_tile(aes(fill = Value,
y = Lipid,
x = interaction(Name, Line, Diet, Sex))) +
scale_fill_gradient2(low="seagreen",mid="white",high="#CC0033", midpoint=0) +
#scale_color_manual(values=c("white","black")) +
scale_y_discrete(limits=rev(levels(scaled_clusts_for_heatmap$Lipid))) +
theme(axis.ticks.x=element_blank(),
#axis.ticks.y=element_blank(),
strip.text = element_text(size=15),
axis.text.x = element_text(angle=90),
axis.text.y = element_text(size=15),
panel.background = element_blank()) +
labs(fill="Z-score") +
facet_wrap(~scaled_clusts_for_heatmap$Day, nrow = 1, ncol = 3)
ggplot(scaled_clusts_for_heatmap) +
geom_tile(aes(fill = Value,
y = Lipid,
x = interaction(Name, Line, Diet, Sex))) +
scale_fill_gradient2(low="seagreen",mid="white",high="#CC0033", midpoint=0) +
#scale_color_manual(values=c("white","black")) +
scale_y_discrete(limits = levels(scaled_clusts_for_heatmap$Lipid)) +
theme(axis.ticks.x=element_blank(),
#axis.ticks.y=element_blank(),
strip.text = element_text(size=15),
axis.text.x = element_text(angle=90),
axis.text.y = element_text(size=15),
panel.background = element_blank()) +
labs(fill="Z-score") +
facet_wrap(~scaled_clusts_for_heatmap$Day, nrow = 1, ncol = 3)
scaled_clusts_for_heatmap <- all_rat_scaled_clusters %>%
dplyr::bind_rows(., .id = "Day") %>%
dplyr::mutate(Name = as.integer(substr(rownames(.),1,5))) %>%
dplyr::relocate(Name) %>%
dplyr::right_join(rat_meta_data, ., by = "Name") %>%
tidyr::gather(key = "Lipid", value = "Value", -c(Name, Line, Diet, Sex, Day)) %>%
dplyr::mutate(Lipid = as.factor(Lipid)) %>%
dplyr::mutate(Diet = factor(Diet, levels = c("Control","Carbohydrate","Fat")))
# Heatmap
ggplot(scaled_clusts_for_heatmap) +
geom_tile(aes(fill = Value,
y = Lipid,
x = interaction(Name, Line, Diet, Sex))) +
scale_fill_gradient2(low="seagreen",mid="white",high="#CC0033", midpoint=0) +
#scale_color_manual(values=c("white","black")) +
scale_y_discrete(limits = rev(levels(scaled_clusts_for_heatmap$Lipid))) +
theme(axis.ticks.x=element_blank(),
#axis.ticks.y=element_blank(),
strip.text = element_text(size=15),
axis.text.x = element_text(angle=90),
axis.text.y = element_text(size=15),
panel.background = element_blank()) +
labs(fill="Z-score") +
facet_wrap(~scaled_clusts_for_heatmap$Day, nrow = 1, ncol = 3)
View(scaled_clusts_for_heatmap)
# Perform data cleaning to make data heatmap plotable
scaled_clusts_for_heatmap <- all_rat_scaled_clusters %>%
dplyr::bind_rows(., .id = "Day") %>%
dplyr::mutate(Name = as.integer(substr(rownames(.),1,5))) %>%
dplyr::relocate(Name) %>%
dplyr::right_join(rat_meta_data, ., by = "Name") %>%
tidyr::gather(key = "Lipid", value = "Value", -c(Name, Line, Diet, Sex, Day)) %>%
dplyr::mutate(Lipid = as.factor(Lipid)) %>%
dplyr::mutate(Diet = factor(Diet, levels = c("Control","Carbohydrate","Fat"))) %>%
dplyr::mutate(Day = factor(Day, levels = c("Day 0","Day 3","Day 14")))
# Heatmap
ggplot(scaled_clusts_for_heatmap) +
geom_tile(aes(fill = Value,
y = Lipid,
x = interaction(Name, Line, Diet, Sex))) +
scale_fill_gradient2(low="seagreen",mid="white",high="#CC0033", midpoint=0) +
#scale_color_manual(values=c("white","black")) +
scale_y_discrete(limits = rev(levels(scaled_clusts_for_heatmap$Lipid))) +
theme(axis.ticks.x=element_blank(),
#axis.ticks.y=element_blank(),
strip.text = element_text(size=15),
axis.text.x = element_text(angle=90),
axis.text.y = element_text(size=15),
panel.background = element_blank()) +
labs(fill="Z-score") +
facet_wrap(~scaled_clusts_for_heatmap$Day, nrow = 1, ncol = 3)
View(rat_meta_data)
getwd()
rat_meta_data$Name <- as.character(rat_meta_data$Name)
library(usethis)
setwd("~/Documents/GitHub/featureReduction")
usethis::use_data(rat_meta_data)
usethis::use_data(rat_meta_data, overwrite = TRUE)
rm(list=ls())
# Set up the session with necessary packages
session_packages = c("tidyverse")
for (lib_name in session_packages){
tryCatch({library(lib_name,character.only = T)}, error = function(e) {
print(paste("Cannot load",lib_name,", please install"))
})
}
# TEMP UNTIL I CAN DO AN INSTALL PACKAGE
devtools::load_all("/Users/johf/Documents/GitHub/featureReduction")
data("rat_lipidomics_day0")
data("rat_lipidomics_day3")
data("rat_lipidomics_day14")
data("rat_lipidomics_group_key")
data("rat_meta_data")
knitr::opts_chunk$set(echo = TRUE, out.height='50%',out.width='50%')
# Combine the 3 days of data into a list
all_rat_lipids <- list(`Day 0` = rat_lipidomics_day0,
`Day 3` = rat_lipidomics_day3,
`Day 14` = rat_lipidomics_day14)
# Perform reduce_features_by_pca on each list item
all_rat_scaled_clusters <- lapply(all_rat_lipids,
function(lipid_dfs) {
featureReduction::reduce_features_by_pca(feature_data = lipid_dfs,
feature_group_key = rat_lipidomics_group_key,
scale = TRUE)})
# Perform data cleaning to make data heatmap plotable
scaled_clusts_for_heatmap <- all_rat_scaled_clusters %>%
dplyr::bind_rows(., .id = "Day") %>%
dplyr::mutate(Name = substr(rownames(.),1,5)) %>%
dplyr::relocate(Name) %>%
dplyr::right_join(rat_meta_data, ., by = "Name") %>%
tidyr::gather(key = "Lipid", value = "Value", -c(Name, Line, Diet, Sex, Day)) %>%
dplyr::mutate(Lipid = as.factor(Lipid)) %>%
dplyr::mutate(Diet = factor(Diet, levels = c("Control","Carbohydrate","Fat"))) %>%
dplyr::mutate(Day = factor(Day, levels = c("Day 0","Day 3","Day 14")))
# Heatmap
p <- ggplot(scaled_clusts_for_heatmap) +
geom_tile(aes(fill = Value,
y = Lipid,
x = interaction(Name, Line, Diet, Sex))) +
scale_fill_gradient2(low="seagreen",mid="white",high="#CC0033", midpoint=0) +
#scale_color_manual(values=c("white","black")) +
scale_y_discrete(limits = rev(levels(scaled_clusts_for_heatmap$Lipid))) +
theme(axis.ticks.x=element_blank(),
#axis.ticks.y=element_blank(),
strip.text = element_text(size=15),
axis.text.x = element_text(angle=90),
axis.text.y = element_text(size=15),
panel.background = element_blank()) +
labs(fill="Z-score") +
facet_wrap(~scaled_clusts_for_heatmap$Day, nrow = 1, ncol = 3)
print(p)
levels(scaled_clusts_for_heatmap$Lipid)
all_rat_lipids <- list(`Day 0` = rat_lipidomics_day0,
`Day 3` = rat_lipidomics_day3,
`Day 14` = rat_lipidomics_day14)
# Perform reduce_features_by_pca on each list item
all_rat_scaled_clusters <- lapply(all_rat_lipids,
function(lipid_dfs) {
featureReduction::reduce_features_by_pca(feature_data = lipid_dfs,
feature_group_key = rat_lipidomics_group_key,
scale = TRUE)})
# Define levels for clusters
ordered_clusters <- c("AcylCN","CE","CER.mono","CER.poly","CER.sat","FFA.mono.poly",
"FFA.sat","GlcCER","PA","PE","PG","PI","Plas.PE","Plas.PC.sat",
"Plas.PC.mono","Plas.PC.poly","SM.sat","SM.mono","SM.poly",
"Lyso.sat","Lyso.mono","Lyso.poly","PC.sat","PC.mono","PC.poly",
"DG.sat","DG.mono","DG.poly","TG.sat.even","TG.sat.odd",
"TG.mono.even","TG.mono.odd","TG.poly.even","TG.poly.odd")
# Perform data cleaning to make data heatmap plotable
scaled_clusts_for_heatmap <- all_rat_scaled_clusters %>%
dplyr::bind_rows(., .id = "Day") %>%
dplyr::mutate(Name = substr(rownames(.),1,5)) %>%
dplyr::relocate(Name) %>%
dplyr::right_join(rat_meta_data, ., by = "Name") %>%
tidyr::gather(key = "Lipid", value = "Value", -c(Name, Line, Diet, Sex, Day)) %>%
dplyr::mutate(Lipid = factor(Lipid, levels = ordered_clusters)) %>%
dplyr::mutate(Diet = factor(Diet, levels = c("Control","Carbohydrate","Fat"))) %>%
dplyr::mutate(Day = factor(Day, levels = c("Day 0","Day 3","Day 14")))
# Heatmap
p <- ggplot(scaled_clusts_for_heatmap) +
geom_tile(aes(fill = Value,
y = Lipid,
x = interaction(Name, Line, Diet, Sex))) +
scale_fill_gradient2(low="seagreen",mid="white",high="#CC0033", midpoint=0) +
#scale_color_manual(values=c("white","black")) +
scale_y_discrete(limits = rev(levels(scaled_clusts_for_heatmap$Lipid))) +
theme(axis.ticks.x=element_blank(),
#axis.ticks.y=element_blank(),
strip.text = element_text(size=15),
axis.text.x = element_text(angle=90),
axis.text.y = element_text(size=15),
panel.background = element_blank()) +
labs(fill="Z-score") +
facet_wrap(~scaled_clusts_for_heatmap$Day, nrow = 1, ncol = 3)
print(p)
# Set up the session with necessary packages
session_packages = c("tidyverse")
for (lib_name in session_packages){
tryCatch({library(lib_name,character.only = T)}, error = function(e) {
print(paste("Cannot load",lib_name,", please install"))
})
}
# TEMP UNTIL I CAN DO AN INSTALL PACKAGE
devtools::load_all("/Users/johf/Documents/GitHub/featureReduction")
data("rat_lipidomics_day0")
data("rat_lipidomics_day3")
data("rat_lipidomics_day14")
data("rat_lipidomics_group_key")
data("rat_meta_data")
ordered_clusters <- c("AcylCN","CE","CER.mono","CER.poly","CER.sat","FFA.mono.poly",
"FFA.sat","GlcCER","PA","PE","PG","PI","Plas.PE","Plas.PC.sat",
"Plas.PC.mono","Plas.PC.poly","SM.sat","SM.mono","SM.poly",
"Lyso.sat","Lyso.mono","Lyso.poly","PC.sat","PC.mono","PC.poly",
"DG.sat","DG.mono","DG.poly","TG.sat.even","TG.sat.odd",
"TG.mono.even","TG.mono.odd","TG.poly.even","TG.poly.odd")
knitr::opts_chunk$set(echo = TRUE, out.height='50%',out.width='50%')
# Combine the 3 days of data into a list
all_rat_lipids <- list(`Day 0` = rat_lipidomics_day0,
`Day 3` = rat_lipidomics_day3,
`Day 14` = rat_lipidomics_day14)
# Perform reduce_features_by_pca on each list item using scaling (for heatmaps)
all_rat_scaled_clusters <- lapply(all_rat_lipids,
function(lipid_dfs) {
featureReduction::reduce_features_by_pca(feature_data = lipid_dfs,
feature_group_key = rat_lipidomics_group_key,
scale = TRUE)})
# Perform reduce_features_by_pca on each list item without scaling
all_rat_norm_clusters <- lapply(all_rat_lipids,
function(lipid_dfs) {
featureReduction::reduce_features_by_pca(feature_data = lipid_dfs,
feature_group_key = rat_lipidomics_group_key,
scale = FALSE)})
# Clean data and use pre-defined ordered clusters
scaled_clusts_for_heatmap <- all_rat_norm_clusters %>%
dplyr::bind_rows(., .id = "Day") %>%
dplyr::mutate(Name = substr(rownames(.),1,5)) %>%
dplyr::relocate(Name) %>%
dplyr::right_join(rat_meta_data, ., by = "Name") %>%
tidyr::gather(key = "Lipid", value = "Value", -c(Name, Line, Diet, Sex, Day)) %>%
dplyr::mutate(Lipid = factor(Lipid, levels = ordered_clusters)) %>%
dplyr::mutate(Diet = factor(Diet, levels = c("Control","Carbohydrate","Fat"))) %>%
dplyr::mutate(Day = factor(Day, levels = c("Day 0","Day 3","Day 14")))
# Clean data and use pre-defined ordered clusters
scaled_clusts_for_logfc <- all_rat_norm_clusters %>%
dplyr::bind_rows(., .id = "Day") %>%
dplyr::mutate(Name = substr(rownames(.),1,5)) %>%
dplyr::relocate(Name) %>%
dplyr::right_join(rat_meta_data, ., by = "Name") %>%
tidyr::gather(key = "Lipid", value = "Value", -c(Name, Line, Diet, Sex, Day)) %>%
dplyr::mutate(Lipid = factor(Lipid, levels = ordered_clusters)) %>%
dplyr::mutate(Diet = factor(Diet, levels = c("Control","Carbohydrate","Fat"))) %>%
dplyr::mutate(Day = factor(Day, levels = c("Day 0","Day 3","Day 14")))
View(scaled_clusts_for_logfc)
View(all_rat_norm_clusters)
View(rat_lipidomics_day14)
rm(list=ls())
# Set up the session with necessary packages
session_packages = c("tidyverse")
for (lib_name in session_packages){
tryCatch({library(lib_name,character.only = T)}, error = function(e) {
print(paste("Cannot load",lib_name,", please install"))
})
}
# TEMP UNTIL I CAN DO AN INSTALL PACKAGE
devtools::load_all("/Users/johf/Documents/GitHub/featureReduction")
data("rat_lipidomics_day0")
data("rat_lipidomics_day3")
data("rat_lipidomics_day14")
data("rat_lipidomics_group_key")
data("rat_meta_data")
ordered_clusters <- c("AcylCN","CE","CER.mono","CER.poly","CER.sat","FFA.mono.poly",
"FFA.sat","GlcCER","PA","PE","PG","PI","Plas.PE","Plas.PC.sat",
"Plas.PC.mono","Plas.PC.poly","SM.sat","SM.mono","SM.poly",
"Lyso.sat","Lyso.mono","Lyso.poly","PC.sat","PC.mono","PC.poly",
"DG.sat","DG.mono","DG.poly","TG.sat.even","TG.sat.odd",
"TG.mono.even","TG.mono.odd","TG.poly.even","TG.poly.odd")
knitr::opts_chunk$set(echo = TRUE, out.height='50%',out.width='50%')
# Combine the 3 days of data into a list
all_rat_lipids <- list(`Day 0` = rat_lipidomics_day0,
`Day 3` = rat_lipidomics_day3,
`Day 14` = rat_lipidomics_day14)
# Perform reduce_features_by_pca on each list item using scaling (for heatmaps)
# The data provided in the package is not log2 normalized, which is performed here
all_rat_scaled_clusters <- lapply(all_rat_lipids,
function(lipid_dfs) {
featureReduction::reduce_features_by_pca(feature_data = log2(lipid_dfs),
feature_group_key = rat_lipidomics_group_key,
scale = TRUE)})
# Perform reduce_features_by_pca on each list item without scaling
all_rat_norm_clusters <- lapply(all_rat_lipids,
function(lipid_dfs) {
featureReduction::reduce_features_by_pca(feature_data = log2(lipid_dfs),
feature_group_key = rat_lipidomics_group_key,
scale = FALSE)})
# Clean data to make data heatmap plotable, using pre-defined ordered clusters
scaled_clusts_for_heatmap <- all_rat_scaled_clusters %>%
dplyr::bind_rows(., .id = "Day") %>%
dplyr::mutate(Name = substr(rownames(.),1,5)) %>%
dplyr::relocate(Name) %>%
dplyr::right_join(rat_meta_data, ., by = "Name") %>%
tidyr::gather(key = "Lipid", value = "Value", -c(Name, Line, Diet, Sex, Day)) %>%
dplyr::mutate(Lipid = factor(Lipid, levels = ordered_clusters)) %>%
dplyr::mutate(Diet = factor(Diet, levels = c("Control","Carbohydrate","Fat"))) %>%
dplyr::mutate(Day = factor(Day, levels = c("Day 0","Day 3","Day 14")))
# Heatmap
p <- ggplot(scaled_clusts_for_heatmap) +
geom_tile(aes(fill = Value,
y = Lipid,
x = interaction(Name, Line, Diet, Sex))) +
scale_fill_gradient2(low="seagreen",mid="white",high="#CC0033", midpoint=0) +
scale_y_discrete(limits = rev(levels(scaled_clusts_for_heatmap$Lipid))) +
theme(axis.ticks.x=element_blank(),
strip.text = element_text(size=15),
axis.text.x = element_text(angle=90),
axis.text.y = element_text(size=15),
panel.background = element_blank()) +
labs(fill="Z-score") +
facet_wrap(~scaled_clusts_for_heatmap$Day, nrow = 1, ncol = 3)
print(p)
# Clean data and use pre-defined ordered clusters
scaled_clusts_for_logfc <- all_rat_norm_clusters %>%
dplyr::bind_rows(., .id = "Day") %>%
dplyr::mutate(Name = substr(rownames(.),1,5)) %>%
dplyr::relocate(Name) %>%
dplyr::right_join(rat_meta_data, ., by = "Name") %>%
tidyr::gather(key = "Lipid", value = "Value", -c(Name, Line, Diet, Sex, Day)) %>%
dplyr::mutate(Lipid = factor(Lipid, levels = ordered_clusters)) %>%
dplyr::mutate(Diet = factor(Diet, levels = c("Control","Carbohydrate","Fat"))) %>%
dplyr::mutate(Day = factor(Day, levels = c("Day 0","Day 3","Day 14")))
View(scaled_clusts_for_logfc)

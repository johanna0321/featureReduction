all_metabolites_temp = curr_data$row_annot %>%
select(metabolite_name) %>%
mutate(Dataset = currname) %>%
mutate(Tissue = curr_data$tissue) %>%
mutate(Site = curr_data$site) %>%
mutate(Platform = curr_data$platform)
all_metabolites = rbind(all_metabolites, all_metabolites_temp)
}
# Create a plot that shows the number of features per platform, tissue, and site
# that were associated with phase-dependent missingness
ggplot(phase_dependent_metabolite_report) +
geom_bar(aes(x = Platform, fill = Tissue)) +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
ggtitle(paste0("Number of metabolites with missingness\nassociated with phase (model p < 0.01)"))
ggplot(all_metabolites) +
geom_bar(aes(x = Platform, fill = Tissue)) +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
ggtitle(paste0("Number of metabolites total"))
View(phasewise_pvalues)
phase_dependent_metabolite_report = c()
for(currname in names(metabolomics_processed_datasets)){
if(!grepl("metab-u",currname)){next}
curr_data = metabolomics_processed_datasets[[currname]]
# Skip if only PASS1A
if(length(unique(curr_data$sample_meta$phase))==1){next}
# Determine whether model will include sex or not
if(length(unique(curr_data$sample_meta$sex))>1) {
model_function = "is_NA ~ sex + group + phase"
} else {
model_function = "is_NA ~ group + phase"
}
phasewise_pvalues = c()
for (metabolite in curr_data$row_annot$metabolite_name) {
# Assign metabolite a binary is_NA indicator and join
# to metadata which contains covariates
curr_raw_metab_data = curr_data$normalized_data$raw[metabolite,] %>%
t(.) %>% as.data.frame(.) %>%
mutate(is_NA = is.na(.)*1) %>%
mutate(viallabel = rownames(.)) %>%
left_join(., curr_data$sample_meta, by = "viallabel")
colnames(curr_raw_metab_data)[1:2] = c("metab","is_NA")
# If there are no NA values, skip model computation
if(sum(is.na(curr_raw_metab_data$metab))==0){next}
# Run a linear model that determines the dependency of missingness on
# phase, when adjusted for sex and group
temp_model = lm(as.formula(model_function), curr_raw_metab_data)
# Isolate p-value on phase variable and save to object
phasewise_pvalues = rbind(phasewise_pvalues,
c(metabolite,summary(temp_model)$coefficients["phasepass1c",4]))
}
if(is.null(phasewise_pvalues)){next}
# Filter for p-values below threshold (here, alpha = 0.01)
colnames(phasewise_pvalues) = c("Metabolite", "Pvalue")
phasewise_pvalues_filtered = as.data.frame(phasewise_pvalues) %>%
na.omit() %>%
filter(Pvalue < 0.01)
# Append metabolites to report list
new_phase_dependent_metabolite_report = phasewise_pvalues_filtered %>%
mutate(Dataset = currname) %>%
mutate(Tissue = curr_data$tissue) %>%
mutate(Site = curr_data$site) %>%
mutate(Platform = curr_data$platform) %>%
mutate(Percent = nrow(.)/length(curr_data$row_annot$metabolite_name))
phase_dependent_metabolite_report = rbind(phase_dependent_metabolite_report,
new_phase_dependent_metabolite_report)
# Pull metabolite names to remove
metabolite_names_remove = phasewise_pvalues_filtered %>% pull(Metabolite)
}
# To parallel against missingness plot, gather information on the number of metabolites
all_metabolites = c()
for(currname in unique(phase_dependent_metabolite_report$Dataset)){
curr_data = metabolomics_processed_datasets[[currname]]
all_metabolites_temp = curr_data$row_annot %>%
select(metabolite_name) %>%
mutate(Dataset = currname) %>%
mutate(Tissue = curr_data$tissue) %>%
mutate(Site = curr_data$site) %>%
mutate(Platform = curr_data$platform)
all_metabolites = rbind(all_metabolites, all_metabolites_temp)
}
# Create a plot that shows the number of features per platform, tissue, and site
# that were associated with phase-dependent missingness
ggplot(phase_dependent_metabolite_report) +
geom_bar(aes(x = Platform, fill = Tissue)) +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
ggtitle(paste0("Number of metabolites with missingness\nassociated with phase (model p < 0.01)"))
ggplot(all_metabolites) +
geom_bar(aes(x = Platform, fill = Tissue)) +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
ggtitle(paste0("Number of metabolites total"))
View(phase_dependent_metabolite_report)
percent_missingness_plot = phase_dependent_metabolite_report %>%
group_by(Dataset) %>%
slice_head(n = 1)
ggplot(percent_missingness_plot) +
geom_col(aes(x = Dataset, y = Percent, fill = Tissue)) +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
ggtitle(paste0("Percent of dataset where missingness was associated with phase"))
ggplot(percent_missingness_plot) +
geom_col(aes(x = interaction(Platform,Site), y = Percent, fill = Tissue)) +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
ggtitle(paste0("Percent of dataset where missingness was associated with phase"))
ggplot(percent_missingness_plot) +
geom_col(aes(x = interaction(Platform,Tissue), y = Percent, fill = Tissue)) +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
ggtitle(paste0("Percent of dataset where missingness was associated with phase"))
ggplot(percent_missingness_plot) +
geom_col(aes(x = interaction(Tissue,Platform), y = Percent, fill = Tissue)) +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
ggtitle(paste0("Percent of dataset where missingness was associated with phase"))
ggplot(percent_missingness_plot) +
geom_col(aes(x = interaction(Platform), y = Percent, fill = Tissue)) +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
ggtitle(paste0("Percent of dataset where missingness was associated with phase"))
ggplot(percent_missingness_plot) +
geom_col(aes(x = Dataset, y = Percent, fill = Tissue)) +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
ggtitle(paste0("Percent of dataset where missingness was associated with phase"))
# Create a plot that shows the number of features per platform, tissue, and site
# that were associated with phase-dependent missingness
ggplot(phase_dependent_metabolite_report) +
geom_bar(aes(x = Dataset, fill = Tissue)) +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
ggtitle(paste0("Number of metabolites with missingness\nassociated with phase (model p < 0.01)"))
# Create a plot that shows the number of features per platform, tissue, and site
# that were associated with phase-dependent missingness
ggplot(phase_dependent_metabolite_report) +
geom_bar(aes(x = Dataset, fill = Tissue)) +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
ggtitle(paste0("Number of metabolites with missingness\nassociated with phase (model p < 0.01)"))
# Create a plot that shows the percent of features per platform that were
# associated with phase-dependent missingness
percent_missingness_plot = phase_dependent_metabolite_report %>%
group_by(Dataset) %>%
slice_head(n = 1)
ggplot(percent_missingness_plot) +
geom_col(aes(x = Dataset, y = Percent, fill = Tissue)) +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
ggtitle(paste0("Percent of dataset where missingness was associated with phase"))
ggplot(phase_dependent_metabolite_report) +
geom_bar(aes(x = Dataset, fill = Tissue)) +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
ggtitle(paste0("Number of metabolites with missingness\nassociated with phase (model p < 0.01)"))
# Create a plot that shows the percent of features per platform that were
# associated with phase-dependent missingness
percent_missingness_plot = phase_dependent_metabolite_report %>%
group_by(Dataset) %>%
slice_head(n = 1)
ggplot(percent_missingness_plot) +
geom_col(aes(x = Dataset, y = Percent, fill = Tissue)) +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
ggtitle(paste0("Percent of dataset where missingness was\nassociated with phase"))
print(paste0("From ", currname, ", ", length(metabolite_names_remove),
" metabolites removed from dataset"))
# Remove from dataset STILL NEED TO ADD - REMOVE FROM ROW_ANNOTE AND NORMALIZED DATA
print(paste0("From ", currname, ": ", length(metabolite_names_remove),
" metabolites (",  length(metabolite_names_remove)/length(curr_data$row_annot$metabolite_name),
"% of metabolites in dataset) removed from dataset"))
# Remove from dataset STILL NEED TO ADD - REMOVE FROM ROW_ANNOTE AND NORMALIZED DATA
print(paste0("From ", currname, ": ", length(metabolite_names_remove),
" metabolites (",  round(length(metabolite_names_remove)/length(curr_data$row_annot$metabolite_name),2),
"% of metabolites in dataset) removed from dataset"))
# Remove from dataset STILL NEED TO ADD - REMOVE FROM ROW_ANNOTE AND NORMALIZED DATA
print(paste0("From ", currname, ": ", length(metabolite_names_remove),
" metabolites (",  round(length(metabolite_names_remove)/length(curr_data$row_annot$metabolite_name),2),
"% of dataset) removed"))
print(paste0("From ", currname, ": No metabolites have missingness associated with phase"))
phase_dependent_metabolite_report = c()
for(currname in names(metabolomics_processed_datasets)){
if(!grepl("metab-u",currname)){next}
curr_data = metabolomics_processed_datasets[[currname]]
# Skip if only PASS1A
if(length(unique(curr_data$sample_meta$phase))==1){next}
# Determine whether model will include sex or not
if(length(unique(curr_data$sample_meta$sex))>1) {
model_function = "is_NA ~ sex + group + phase"
} else {
model_function = "is_NA ~ group + phase"
}
phasewise_pvalues = c()
for (metabolite in curr_data$row_annot$metabolite_name) {
# Assign metabolite a binary is_NA indicator and join
# to metadata which contains covariates
curr_raw_metab_data = curr_data$normalized_data$raw[metabolite,] %>%
t(.) %>% as.data.frame(.) %>%
mutate(is_NA = is.na(.)*1) %>%
mutate(viallabel = rownames(.)) %>%
left_join(., curr_data$sample_meta, by = "viallabel")
colnames(curr_raw_metab_data)[1:2] = c("metab","is_NA")
# If there are no NA values, skip model computation
if(sum(is.na(curr_raw_metab_data$metab))==0){next}
# Run a linear model that determines the dependency of missingness on
# phase, when adjusted for sex and group
temp_model = lm(as.formula(model_function), curr_raw_metab_data)
# Isolate p-value on phase variable and save to object
phasewise_pvalues = rbind(phasewise_pvalues,
c(metabolite,summary(temp_model)$coefficients["phasepass1c",4]))
}
if(is.null(phasewise_pvalues)){
print(paste0("Why null: ", currname))
next}
# Filter for p-values below threshold (here, alpha = 0.01)
colnames(phasewise_pvalues) = c("Metabolite", "Pvalue")
phasewise_pvalues_filtered = as.data.frame(phasewise_pvalues) %>%
na.omit() %>%
filter(Pvalue < 0.01)
if(length(phasewise_pvalues)==0){
print(paste0("In ", currname, ": No metabolites have missingness associated with phase"))
next}
# Append metabolites to report list
new_phase_dependent_metabolite_report = phasewise_pvalues_filtered %>%
mutate(Dataset = currname) %>%
mutate(Tissue = curr_data$tissue) %>%
mutate(Site = curr_data$site) %>%
mutate(Platform = curr_data$platform) %>%
mutate(Percent = nrow(.)/length(curr_data$row_annot$metabolite_name))
phase_dependent_metabolite_report = rbind(phase_dependent_metabolite_report,
new_phase_dependent_metabolite_report)
# Pull metabolite names to remove
metabolite_names_remove = phasewise_pvalues_filtered %>% pull(Metabolite)
# Remove from dataset STILL NEED TO ADD - REMOVE FROM ROW_ANNOTE AND NORMALIZED DATA
print(paste0("In ", currname, ": ", length(metabolite_names_remove),
" metabolites (",  round(length(metabolite_names_remove)/length(curr_data$row_annot$metabolite_name),2),
"% of dataset) removed"))
}
currname="t31-plasma,metab-u-ionpneg,michigan"
curr_data = metabolomics_processed_datasets[[currname]]
length(unique(curr_data$sample_meta$phase))==1
if(length(unique(curr_data$sample_meta$sex))>1) {
model_function = "is_NA ~ sex + group + phase"
} else {
model_function = "is_NA ~ group + phase"
}
phasewise_pvalues = c()
for (metabolite in curr_data$row_annot$metabolite_name) {
# Assign metabolite a binary is_NA indicator and join
# to metadata which contains covariates
curr_raw_metab_data = curr_data$normalized_data$raw[metabolite,] %>%
t(.) %>% as.data.frame(.) %>%
mutate(is_NA = is.na(.)*1) %>%
mutate(viallabel = rownames(.)) %>%
left_join(., curr_data$sample_meta, by = "viallabel")
colnames(curr_raw_metab_data)[1:2] = c("metab","is_NA")
# If there are no NA values, skip model computation
if(sum(is.na(curr_raw_metab_data$metab))==0){next}
# Run a linear model that determines the dependency of missingness on
# phase, when adjusted for sex and group
temp_model = lm(as.formula(model_function), curr_raw_metab_data)
# Isolate p-value on phase variable and save to object
phasewise_pvalues = rbind(phasewise_pvalues,
c(metabolite,summary(temp_model)$coefficients["phasepass1c",4]))
}
View(curr_raw_metab_data)
sum(is.na(curr_data$normalized_data))
sum(is.na(curr_data$normalized_data$raw))
currname="t58-heart,metab-u-ionpneg,michigan"
curr_data = metabolomics_processed_datasets[[currname]]
# Skip if only PASS1A
if(length(unique(curr_data$sample_meta$phase))==1){
print(paste0("In ", currname, ": No PASS1C samples"))
next}
# Skip if there are no missing samples
if(sum(is.na(curr_data$normalized_data$raw))==0){
print(paste0("In ", currname, ": No missing samples"))
next}
# Determine whether model will include sex or not
if(length(unique(curr_data$sample_meta$sex))>1) {
model_function = "is_NA ~ sex + group + phase"
} else {
model_function = "is_NA ~ group + phase"
}
phasewise_pvalues = c()
for (metabolite in curr_data$row_annot$metabolite_name) {
# Assign metabolite a binary is_NA indicator and join
# to metadata which contains covariates
curr_raw_metab_data = curr_data$normalized_data$raw[metabolite,] %>%
t(.) %>% as.data.frame(.) %>%
mutate(is_NA = is.na(.)*1) %>%
mutate(viallabel = rownames(.)) %>%
left_join(., curr_data$sample_meta, by = "viallabel")
colnames(curr_raw_metab_data)[1:2] = c("metab","is_NA")
# If there are no NA values, skip model computation
if(sum(is.na(curr_raw_metab_data$metab))==0){next}
# Run a linear model that determines the dependency of missingness on
# phase, when adjusted for sex and group
temp_model = lm(as.formula(model_function), curr_raw_metab_data)
# Isolate p-value on phase variable and save to object
phasewise_pvalues = rbind(phasewise_pvalues,
c(metabolite,summary(temp_model)$coefficients["phasepass1c",4]))
}
View(phasewise_pvalues)
curr_data$row_annot$metabolite_name
sum(is.na(curr_data$normalized_data$raw))
# Filter for p-values below threshold (here, alpha = 0.01)
colnames(phasewise_pvalues) = c("Metabolite", "Pvalue")
phasewise_pvalues_filtered = as.data.frame(phasewise_pvalues) %>%
na.omit() %>%
filter(Pvalue < 0.01)
View(phasewise_pvalues_filtered)
length(phasewise_pvalues_filtered)
nrow(phasewise_pvalues_filtered)
phase_dependent_metabolite_report = c()
for(currname in names(metabolomics_processed_datasets)){
if(!grepl("metab-u",currname)){next}
curr_data = metabolomics_processed_datasets[[currname]]
# Skip if only PASS1A
if(length(unique(curr_data$sample_meta$phase))==1){
print(paste0("In ", currname, ": No PASS1C samples"))
next}
# Skip if there are no missing samples
if(sum(is.na(curr_data$normalized_data$raw))==0){
print(paste0("In ", currname, ": No missing samples"))
next}
# Determine whether model will include sex or not
if(length(unique(curr_data$sample_meta$sex))>1) {
model_function = "is_NA ~ sex + group + phase"
} else {
model_function = "is_NA ~ group + phase"
}
phasewise_pvalues = c()
for (metabolite in curr_data$row_annot$metabolite_name) {
# Assign metabolite a binary is_NA indicator and join
# to metadata which contains covariates
curr_raw_metab_data = curr_data$normalized_data$raw[metabolite,] %>%
t(.) %>% as.data.frame(.) %>%
mutate(is_NA = is.na(.)*1) %>%
mutate(viallabel = rownames(.)) %>%
left_join(., curr_data$sample_meta, by = "viallabel")
colnames(curr_raw_metab_data)[1:2] = c("metab","is_NA")
# If there are no NA values, skip model computation
if(sum(is.na(curr_raw_metab_data$metab))==0){next}
# Run a linear model that determines the dependency of missingness on
# phase, when adjusted for sex and group
temp_model = lm(as.formula(model_function), curr_raw_metab_data)
# Isolate p-value on phase variable and save to object
phasewise_pvalues = rbind(phasewise_pvalues,
c(metabolite,summary(temp_model)$coefficients["phasepass1c",4]))
}
if(is.null(phasewise_pvalues)){
print(paste0("Why null: ", currname))
next}
# Filter for p-values below threshold (here, alpha = 0.01)
colnames(phasewise_pvalues) = c("Metabolite", "Pvalue")
phasewise_pvalues_filtered = as.data.frame(phasewise_pvalues) %>%
na.omit() %>%
filter(Pvalue < 0.01)
if(nrow(phasewise_pvalues_filtered)==0){
print(paste0("In ", currname, ": No metabolites have missingness associated with phase"))
next}
# Append metabolites to report list
new_phase_dependent_metabolite_report = phasewise_pvalues_filtered %>%
mutate(Dataset = currname) %>%
mutate(Tissue = curr_data$tissue) %>%
mutate(Site = curr_data$site) %>%
mutate(Platform = curr_data$platform) %>%
mutate(Percent = nrow(.)/length(curr_data$row_annot$metabolite_name))
phase_dependent_metabolite_report = rbind(phase_dependent_metabolite_report,
new_phase_dependent_metabolite_report)
# Pull metabolite names to remove
metabolite_names_remove = phasewise_pvalues_filtered %>% pull(Metabolite)
# Remove from dataset STILL NEED TO ADD - REMOVE FROM ROW_ANNOTE AND NORMALIZED DATA
print(paste0("In ", currname, ": ", length(metabolite_names_remove),
" metabolites (",  round(length(metabolite_names_remove)/length(curr_data$row_annot$metabolite_name),2),
"% of dataset) removed"))
}
phase_dependent_metabolite_report = c()
for(currname in names(metabolomics_processed_datasets)){
if(!grepl("metab-u",currname)){next}
curr_data = metabolomics_processed_datasets[[currname]]
# Skip if only PASS1A
if(length(unique(curr_data$sample_meta$phase))==1){
print(paste0("In ", currname, ": No PASS1C samples"))
next}
# Skip if there are no missing samples
if(sum(is.na(curr_data$normalized_data$raw))==0){
print(paste0("In ", currname, ": No missing samples"))
next}
# Determine whether model will include sex or not
if(length(unique(curr_data$sample_meta$sex))>1) {
model_function = "is_NA ~ sex + group + phase"
} else {
model_function = "is_NA ~ group + phase"
}
phasewise_pvalues = c()
for (metabolite in curr_data$row_annot$metabolite_name) {
# Assign metabolite a binary is_NA indicator and join
# to metadata which contains covariates
curr_raw_metab_data = curr_data$normalized_data$raw[metabolite,] %>%
t(.) %>% as.data.frame(.) %>%
mutate(is_NA = is.na(.)*1) %>%
mutate(viallabel = rownames(.)) %>%
left_join(., curr_data$sample_meta, by = "viallabel")
colnames(curr_raw_metab_data)[1:2] = c("metab","is_NA")
# If there are no NA values, skip model computation
if(sum(is.na(curr_raw_metab_data$metab))==0){next}
# Run a linear model that determines the dependency of missingness on
# phase, when adjusted for sex and group
temp_model = lm(as.formula(model_function), curr_raw_metab_data)
# Isolate p-value on phase variable and save to object
phasewise_pvalues = rbind(phasewise_pvalues,
c(metabolite,summary(temp_model)$coefficients["phasepass1c",4]))
}
if(is.null(phasewise_pvalues)){
print(paste0("Why null: ", currname))
next}
# Filter for p-values below threshold (here, alpha = 0.01)
colnames(phasewise_pvalues) = c("Metabolite", "Pvalue")
phasewise_pvalues_filtered = as.data.frame(phasewise_pvalues) %>%
na.omit() %>%
filter(Pvalue < 0.01)
if(nrow(phasewise_pvalues_filtered)==0){
print(paste0("In ", currname, ": No metabolites have missingness associated with phase"))
next}
# Append metabolites to report list
new_phase_dependent_metabolite_report = phasewise_pvalues_filtered %>%
mutate(Dataset = currname) %>%
mutate(Tissue = curr_data$tissue) %>%
mutate(Site = curr_data$site) %>%
mutate(Platform = curr_data$platform) %>%
mutate(Percent = nrow(.)/length(curr_data$row_annot$metabolite_name))
phase_dependent_metabolite_report = rbind(phase_dependent_metabolite_report,
new_phase_dependent_metabolite_report)
# Pull metabolite names to remove
metabolite_names_remove = phasewise_pvalues_filtered %>% pull(Metabolite)
# Remove from dataset STILL NEED TO ADD - REMOVE FROM ROW_ANNOTE AND NORMALIZED DATA
print(paste0("In ", currname, ": ", length(metabolite_names_remove),
" metabolites (",  round(100*length(metabolite_names_remove)/length(curr_data$row_annot$metabolite_name),2),
"% of dataset) removed"))
}
# Create a plot that shows the number of features per platform, tissue, and site
# that were associated with phase-dependent missingness
ggplot(phase_dependent_metabolite_report) +
geom_bar(aes(x = Dataset, fill = Tissue)) +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
ggtitle(paste0("Number of metabolites with missingness\nassociated with phase (model p < 0.01)"))
# Create a plot that shows the percent of features per platform that were
# associated with phase-dependent missingness
percent_missingness_plot = phase_dependent_metabolite_report %>%
group_by(Dataset) %>%
slice_head(n = 1)
ggplot(percent_missingness_plot) +
geom_col(aes(x = Dataset, y = Percent, fill = Tissue)) +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
ggtitle(paste0("Percent of dataset where missingness was\nassociated with phase"))
View(metabolomics_processed_datasets)
View(metabolomics_processed_datasets[["t68-liver,metab-u-ionpneg,michigan"]][["normalized_data"]][["raw"]])
dim(metabolomics_processed_datasets[["t68-liver,metab-u-ionpneg,michigan"]][["normalized_data"]][["raw"]])
8/393
setwd("~/Documents/GitHub")
library(devtools)
devtools::install(featureReduction)
devtools::install("featureReduction")
library(featureReduction)
reduce_features_by_pca(rat_lipidomics_day0,rat_meta_data,T)
reduce_features_by_pca(rat_lipidomics_day0,rat_lipidomics_group_key,T)
setwd("~/Documents/GitHub/featureReduction")
devtools::check()
devtools::check()
devtools::check()
?dplyr::filter
devtools::check()
